name: bazel-orfs build tests

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  lint:
    name: Lint Bazel files
    runs-on: ubuntu-22.04
    env:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - name: Download buildifier
        run: |
          wget https://github.com/bazelbuild/buildtools/releases/download/v6.4.0/buildifier-linux-amd64 -O /usr/local/bin/buildifier
          chmod +x /usr/local/bin/buildifier
          buildifier -version
      - name: Checkout bazel-orfs
        uses: actions/checkout@v4
      - name: Check Bazel files
        run: |
          buildifier -lint warn -r .

  build-stage-target:
    name: Build sample stage targets
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        STAGE_TARGET: ["tag_array_64x184_generate_abstract", "L1MetadataArray_test_generate_abstract", "L1MetadataArray_full_generate_abstract"]
    env:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          swap-storage: false
      - name: Print info
        run: |
          echo "USER: "$(whoami)
          echo "PWD: "$(pwd)
          ls -la
          echo "HOME: "$HOME
          docker --version
      - name: Checkout bazel-orfs
        uses: actions/checkout@v4
      - name: load docker image
        run: |
          bazel run --subcommands --verbose_failures --sandbox_debug orfs_env
      - name: query target
        run: |
          bazel query ${{ matrix.STAGE_TARGET }}
          bazel query ${{ matrix.STAGE_TARGET }} --output=build
      - name: build target
        run: |
          bazel build --subcommands --verbose_failures --sandbox_debug ${{ matrix.STAGE_TARGET }}

  test-make-script-target:
    name: Execute sample _make scripts
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/antmicro/bazel-orfs@sha256:78b4c15830d75e026dc2294b280cb5ff1200f6ee7902a714dca71fd61b5b2e4e
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
    env:
      DEBIAN_FRONTEND: "noninteractive"
    steps:
      # Workaround for https://github.com/actions/runner/issues/863
      - name: Override HOME env var
        shell: bash
        run: |
          echo HOME=/root | sudo tee -a $GITHUB_ENV
      - name: Print info
        run: |
          echo "USER: "$(whoami)
          echo "PWD: "$(pwd)
          ls -la
          echo "HOME: "$HOME
          cd ~/OpenROAD-flow-scripts
          echo "OpenROAD-flow-scripts SHA: "$(git rev-parse HEAD)
          source ./env.sh
          yosys --version
          openroad -version
      - name: Checkout bazel-orfs
        uses: actions/checkout@v4
      - name: build local stage targets
        run: |
          echo "Build tag_array_64x184 macro"
          for stage in "synth_sdc" "synth" "floorplan" "generate_abstract"
          do
            echo "query make script target"
            bazel query tag_array_64x184_${stage}_make
            bazel query tag_array_64x184_${stage}_make --output=build
            echo "build make script"
            bazel build --subcommands --verbose_failures --sandbox_debug tag_array_64x184_${stage}_make
            echo "run make script"
            ./bazel-bin/tag_array_64x184_${stage}_make bazel-${stage}
          done
          echo "Build L1MetadataArray"
          for stage in "synth_sdc" "synth" "floorplan" "place" "cts" "grt" "generate_abstract"
          do
            echo "query make script target"
            bazel query L1MetadataArray_test_${stage}_make
            bazel query L1MetadataArray_test_${stage}_make --output=build
            echo "build make script"
            bazel build --subcommands --verbose_failures --sandbox_debug L1MetadataArray_test_${stage}_make
            echo "run make script"
            ./bazel-bin/L1MetadataArray_test_${stage}_make bazel-${stage}
          done
