diff --git a/flow/designs/asap7/mac/config.mk b/flow/designs/asap7/mac/config.mk
new file mode 100644
index 00000000..f1f7e63d
--- /dev/null
+++ b/flow/designs/asap7/mac/config.mk
@@ -0,0 +1,7 @@
+export DESIGN_NAME = mac
+export VERILOG_FILES = designs/src/mac/mac.v
+export SDC_FILE = designs/asap7/mac/constraints.sdc
+export PLATFORM = asap7
+export PLACE_DENSITY= 0.80
+export CORE_UTILIZATION = 0.80
+export SYNTH_RETIME_MODULES = mac
diff --git a/flow/designs/asap7/mac/constraints.sdc b/flow/designs/asap7/mac/constraints.sdc
new file mode 100644
index 00000000..42a0f517
--- /dev/null
+++ b/flow/designs/asap7/mac/constraints.sdc
@@ -0,0 +1,5 @@
+set clk_name clock
+set clk_port_name clock
+set clk_period 250
+
+source $env(PLATFORM_DIR)/constraints.sdc
diff --git a/flow/designs/src/mac/mac.v b/flow/designs/src/mac/mac.v
new file mode 100644
index 00000000..22f25704
--- /dev/null
+++ b/flow/designs/src/mac/mac.v
@@ -0,0 +1,43 @@
+module mac (
+    input  logic         clock,
+    input  logic [15:0]  a,
+    input  logic [15:0]  b,
+    input  logic         valid_in,
+    output logic [31:0]  acc_out,
+    output logic         valid_out
+);
+    // Pipeline registers for a, b, and valid
+    logic [15:0] a_pipe [0:3];
+    logic [15:0] b_pipe [0:3];
+    logic        valid_pipe [0:3];
+    logic [31:0] mul_result;
+    logic [31:0] acc;
+
+    always_ff @(posedge clock) begin
+        // Stage 0: input register
+        a_pipe[0] <= a;
+        b_pipe[0] <= b;
+        valid_pipe[0] <= valid_in;
+
+        // Stages 1-3: pipeline shift
+        a_pipe[1] <= a_pipe[0];
+        b_pipe[1] <= b_pipe[0];
+        valid_pipe[1] <= valid_pipe[0];
+
+        a_pipe[2] <= a_pipe[1];
+        b_pipe[2] <= b_pipe[1];
+        valid_pipe[2] <= valid_pipe[1];
+
+        a_pipe[3] <= a_pipe[2];
+        b_pipe[3] <= b_pipe[2];
+        valid_pipe[3] <= valid_pipe[2];
+
+        // Stage 4: multiply and accumulate
+        mul_result <= a_pipe[3] * b_pipe[3];
+        if (valid_pipe[3])
+            acc <= acc + mul_result;
+    end
+
+    assign acc_out = acc;
+    assign valid_out = valid_pipe[3];
+endmodule
diff --git a/flow/scripts/abc_retime.script b/flow/scripts/abc_retime.script
new file mode 100644
index 00000000..deb1c475
--- /dev/null
+++ b/flow/scripts/abc_retime.script
@@ -0,0 +1,3 @@
+st
+retime -v -o
+map
diff --git a/flow/scripts/abc_speed.script b/flow/scripts/abc_speed.script
index 92a70294..ac99b82d 100644
--- a/flow/scripts/abc_speed.script
+++ b/flow/scripts/abc_speed.script
@@ -11,6 +11,7 @@
 &syn2
 &if -g -K 6
 &synch2
+&retime
 &nf
 &st
 &syn2
diff --git a/flow/scripts/abc_speed_gia_only.script b/flow/scripts/abc_speed_gia_only.script
index e2d22a4f..cf8e551d 100644
--- a/flow/scripts/abc_speed_gia_only.script
+++ b/flow/scripts/abc_speed_gia_only.script
@@ -10,6 +10,7 @@
 &syn2
 &if -g -K 6
 &synch2
+&retime
 &nf
 &st
 &syn2
diff --git a/flow/scripts/synth.tcl b/flow/scripts/synth.tcl
index 92deef5d..21d50719 100644
--- a/flow/scripts/synth.tcl
+++ b/flow/scripts/synth.tcl
@@ -56,6 +56,16 @@ json -o $::env(RESULTS_DIR)/mem.json
 exec -- $::env(PYTHON_EXE) $::env(SCRIPTS_DIR)/mem_dump.py \
   --max-bits $::env(SYNTH_MEMORY_MAX_BITS) $::env(RESULTS_DIR)/mem.json
 
+if { [env_var_exists_and_non_empty SYNTH_RETIME_MODULES] } {
+  select $::env(SYNTH_RETIME_MODULES)
+  opt -fast -full
+  memory_map
+  opt -full
+  techmap
+  abc -dff -script $::env(SCRIPTS_DIR)/abc_retime.script
+  select -clear
+}
+
 if {
   [env_var_exists_and_non_empty SYNTH_WRAPPED_OPERATORS] ||
   [env_var_exists_and_non_empty SWAP_ARITH_OPERATORS]
@@ -113,7 +123,7 @@ setundef -zero
 if { ![env_var_exists_and_non_empty SYNTH_WRAPPED_OPERATORS] } {
   log_cmd abc {*}$abc_args
 } else {
-  scratchpad -set abc9.script scripts/abc_speed_gia_only.script
+  scratchpad -set abc9.script $::env(SCRIPTS_DIR)/abc_speed_gia_only.script
   # crop out -script from arguments
   set abc_args [lrange $abc_args 2 end]
   log_cmd abc_new {*}$abc_args
