"""bazel-orfs dependencies"""

module(
    name = "bazel-orfs",
    version = "0.0.1",
    compatibility_level = 1,
)

bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "rules_java", version = "8.12.0")
bazel_dep(name = "aspect_rules_js", version = "2.1.3")

####### Node.js version #########
# By default you get the node version from DEFAULT_NODE_VERSION in @rules_nodejs//nodejs:repositories.bzl
# Optionally you can pin a different node version:
bazel_dep(name = "rules_nodejs", version = "6.3.0")

node = use_extension("@rules_nodejs//nodejs:extensions.bzl", "node")
node.toolchain(node_version = "16.14.2")
#################################

npm = use_extension("@aspect_rules_js//npm:extensions.bzl", "npm")
npm.npm_translate_lock(
    name = "npm",
    pnpm_lock = "//:pnpm-lock.yaml",
    #verify_node_modules_ignored = "//:.bazelignore",
)
use_repo(npm, "npm")

pnpm = use_extension("@aspect_rules_js//npm:extensions.bzl", "pnpm")

# Allows developers to use the matching pnpm version, for example:
# bazel run -- @pnpm --dir /home/runner/work/rules_js/rules_js install
use_repo(pnpm, "pnpm")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

http_archive(
    name = "oss_cad_suite",
    build_file = "oss_cad_suite.BUILD.bazel",
    sha256 = "e6434197cd3a31dd90899886b0f4b92ebf1f832eb9abb3a8802e120c2ca5cc73",
    strip_prefix = "oss-cad-suite",
    urls = ["https://github.com/YosysHQ/oss-cad-suite-build/releases/download/2024-08-28/oss-cad-suite-linux-x64-20240828.tgz"],
)

load_json_file = use_repo_rule("//:load_json_file.bzl", "load_json_file")

load_json_file(
    name = "orfs_variable_metadata",
    src = "@docker_orfs//:OpenROAD-flow-scripts/flow/scripts/variables.yaml",
    # Dummy output file, we're not actually using it
    out = "variables.json",
    script = "//:yaml_to_json.py",
)

bazel_dep(
    name = "rules_python",
    version = "1.2.0",
    # reduce namespace collisions by prefixing with bazel_orfs
    repo_name = "bazel_orfs_rules_python",
)

python = use_extension("@bazel_orfs_rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    ignore_root_user_error = True,
    python_version = "3.13",
)

pip = use_extension("@bazel_orfs_rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "bazel-orfs-pip",
    python_version = "3.13",
    requirements_lock = "//:requirements_lock_3_13.txt",
)
use_repo(pip, "bazel-orfs-pip")

orfs = use_extension("//:extension.bzl", "orfs_repositories")
orfs.default(
    # a local only or remote docker image. Local docker images do not
    # have a sha256.
    image = "docker.io/openroad/orfs:v3.0-3624-gad13f2df",
    # Smoketest, this is the default value
    makefile = "@docker_orfs//:makefile",
    # Comment out line below for local only docker images
    sha256 = "f1eb20a56c5f5e05e93c07dd07d838e0e8a4812c17ff9bf6e5a4897069ec1ed6",
)
use_repo(orfs, "com_github_nixos_patchelf_download")
use_repo(orfs, "docker_orfs")
use_repo(orfs, "config")

# Not in use in CI
#
# pin = use_extension("//extensions:pin.bzl", "pin")
# pin.artifacts(
#     artifacts_lock = "//:artifacts_lock.txt",
#     repo_name = "pinned",
# )
# use_repo(pin, "pinned")

SCALA_VERSION = "2.13.16"

SCALA_VERSION_SHORT = SCALA_VERSION.rpartition(".")[0]

CIRCE_VERSION = "0.14.4"

MAVEN_DEPS = {
    "org.apache.commons:commons-text": "1.12.0",
    "org.scala-lang:scala-compiler": SCALA_VERSION,
    "org.scala-lang:scala-library": SCALA_VERSION,
    "org.scala-lang:scala-reflect": SCALA_VERSION,
}

MAVEN_SHORT_DEPS = {
    "com.github.scopt:scopt": "4.1.0",
    "com.lihaoyi:os-lib": "0.10.0",
    "com.lihaoyi:ujson": "4.1.0",
    "com.lihaoyi:upickle": "4.1.0",
    "io.circe:circe-core": CIRCE_VERSION,
    "io.circe:circe-generic": CIRCE_VERSION,
    "io.circe:circe-generic-extras": CIRCE_VERSION,
    "io.circe:circe-parser": CIRCE_VERSION,
    "org.json4s:json4s-native": "4.0.7",
    "org.chipsalliance:chisel": "7.0.0-RC3",
    "org.chipsalliance:firtool-resolver": "2.0.1",
    "org.scalatest:scalatest": "3.2.19",
}

MAVEN_LONG_DEPS = {
    "org.chipsalliance:chisel-plugin": "7.0.0-RC3",
    "org.scalameta:semanticdb-scalac": "4.13.6",
}

maven = use_extension("@rules_jvm_external//:extensions.bzl", "maven")
maven.install(
    artifacts = ["{}_{}:{}".format(dep, SCALA_VERSION_SHORT, version) for (dep, version) in MAVEN_SHORT_DEPS.items()] +
                ["{}_{}:{}".format(dep, SCALA_VERSION, version) for (dep, version) in MAVEN_LONG_DEPS.items()] +
                ["{}:{}".format(dep, version) for (dep, version) in MAVEN_DEPS.items()],
    fetch_sources = True,
    # bazelisk run @maven//:pin
    lock_file = "//:maven_install.json",
    repositories = [
        "https://repo1.maven.org/maven2",  # fastest mirror, last I tried
        "https://s01.oss.sonatype.org/content/repositories/releases",
        "https://s01.oss.sonatype.org/content/repositories/snapshots",
    ],
)
use_repo(maven, "maven")

register_toolchains(
    "//toolchains/scala:all",
)

http_archive(
    name = "circt",
    build_file_content = """
exports_files(glob(["bin/*"]), visibility = ["//visibility:public"])
""",
    sha256 = "44b03df50843ceb5f49ad0e6a84c382008e591361ec1dd4086ac8321877e401b",
    strip_prefix = "firtool-1.127.0",
    url = "https://github.com/llvm/circt/releases/download/firtool-1.127.0/circt-full-static-linux-x64.tar.gz",
)
